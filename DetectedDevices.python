from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, StringType

import requests
import time


# Define the schema for the managed devices
devices_schema = StructType([
    StructField("id", StringType(), True),
    StructField("deviceId", StringType(), True)
])


def call_api(endpoint):
    """
    Calls the Microsoft Graph API using the provided endpoint and returns the response JSON.
    """
    headers = {"Authorization": f"Bearer {access_token}"}
    response = requests.get(endpoint, headers=headers)
    response.raise_for_status()
    return response.json()


# Initialize the SparkSession
spark = SparkSession.builder.appName("MicrosoftGraphAPI").getOrCreate()

# Set the access token for the Microsoft Graph API
access_token = "<your access token>"

# Call the API to get the detected apps
api_endpoint = "https://graph.microsoft.com/v1.0/deviceManagement/detectedApps"
api_params = " $select=id"
try:
    response = call_api(api_endpoint + api_params)

    # Check if there is another page of data to retrieve
    while "@odata.nextLink" in response:
        next_link = response["@odata.nextLink"]
        response = call_api(next_link)

    # Extract the IDs of the detected apps from the response
    detected_app_ids = [app["id"] for app in response["value"]]
except requests.exceptions.HTTPError as e:
    print(f"Error getting detected apps: {e}")
    detected_app_ids = []

# Call the API to get the managed devices for each detected app
devices = []
for app_id in detected_app_ids:
    try:
        # Call the API to get the managed devices for the detected app
        api_endpoint = f"https://graph.microsoft.com/v1.0/deviceManagement/detectedApps/{app_id}/managedDevices"
        response = call_api(api_endpoint)

        # Check if there is another page of data to retrieve
        while "@odata.nextLink" in response:
            next_link = response["@odata.nextLink"]
            response = call_api(next_link)

        # Extract the device IDs from the response
        device_ids = [device["id"] for device in response["value"]]

        # Add the app ID and device IDs to the list
        for device_id in device_ids:
            devices.append((app_id, device_id))
        time.sleep(5)
    except requests.exceptions.HTTPError as e:
        print(f"Error getting managed devices for app ID {app_id}: {e}")

# Create a DataFrame from the list of app and device IDs
devices_df = spark.createDataFrame(devices, schema=devices_schema)

# Write the DataFrame to a Parquet file
devices_df.write.mode("overwrite").parquet("devices.parquet")

# Stop the SparkSession
spark.stop()
