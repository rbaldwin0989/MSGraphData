from pyspark.sql import SparkSession
import requests
import time
from urllib.parse import urlencode

# Set up a Spark session
spark = SparkSession.builder.appName("MicrosoftGraphAPIToParquet").getOrCreate()

# Define the API endpoint and parameters for the detected apps
api_endpoint = "https://graph.microsoft.com/v1.0/deviceManagement/detectedApps"
api_params = {"$select": "id,displayName,version,appId,deviceCount"}

# Encode the parameters as part of the URL
api_endpoint += "?" + urlencode(api_params)

# Initialize an empty list to store device data
devices = []

# Loop through all pages of detected app results
while api_endpoint is not None:
    # Make the API request for detected apps
    api_response = requests.get(api_endpoint, headers={"Authorization": "Bearer ACCESS_TOKEN"})

    # Check the status code of the response
    if api_response.status_code == 429 and "Retry-After" in api_response.headers:
        # If we receive a "TooManyRequests" error, wait the specified amount of time and try again
        retry_after = int(api_response.headers["Retry-After"])
        print(f"Received TooManyRequests error. Waiting {retry_after} seconds before retrying...")
        time.sleep(retry_after)
        continue

    # Convert the response to a JSON object
    api_response_json = api_response.json()

    # Loop through the detected apps in the response
    for app in api_response_json["value"]:
        # Get the ID of the detected app
        app_id = app["id"]

        # Define the API endpoint for getting the managed devices for the detected app
        api_endpoint_devices = f"https://graph.microsoft.com/v1.0/deviceManagement/detectedApps/{app_id}/managedDevices"

        # Initialize the next link for managed devices to be the first page
        next_link_devices = api_endpoint_devices

        # Loop through all pages of managed device results for this app
        while next_link_devices is not None:
            # Make the API request for managed devices
            api_response_devices = requests.get(next_link_devices, headers={"Authorization": "Bearer ACCESS_TOKEN"})

            # Check the status code of the response
            if api_response_devices.status_code == 429 and "Retry-After" in api_response_devices.headers:
                # If we receive a "TooManyRequests" error, wait the specified amount of time and try again
                retry_after = int(api_response_devices.headers["Retry-After"])
                print(f"Received TooManyRequests error. Waiting {retry_after} seconds before retrying...")
                time.sleep(retry_after)
                continue

            # Convert the response to a JSON object and add it to the devices list
            devices_json = api_response_devices.json()
            devices.extend(devices_json["value"])

            # Check for next page of results
            next_link_devices = devices_json.get("@odata.nextLink")

    # Check for next page of detected app results
    api_endpoint = api_response_json.get("@odata.nextLink")

# Convert the devices list to a PySpark DataFrame
df = spark.read.json(sc.parallelize(devices))

# Write the DataFrame to a Parquet file
df.write.parquet("detected_apps_managed_devices.parquet")

# Stop the Spark session
spark.stop()
